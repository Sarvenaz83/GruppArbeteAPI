// <auto-generated />
using System;
using Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HarryPotterContext))]
    [Migration("20240131002228_CJMigrations")]
    partial class CJMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorId");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("authorName");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("AuthorId")
                        .HasName("PK__author__8E2731B93441940C");

                    b.ToTable("author", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("9363d81e-b1b8-4fb4-9d0f-9c203ab38208"),
                            AuthorName = "J.K Rowling",
                            IsDeleted = false
                        },
                        new
                        {
                            AuthorId = new Guid("423f7251-7721-46f1-8291-6e5f198e11d2"),
                            AuthorName = "Alan Rickman",
                            IsDeleted = false
                        },
                        new
                        {
                            AuthorId = new Guid("6b121264-6f37-4961-89da-c4175c3c600c"),
                            AuthorName = "Stephen King",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookId");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorId");

                    b.Property<string>("Genre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("genre");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("pages");

                    b.Property<DateTime?>("PubYear")
                        .HasColumnType("datetime")
                        .HasColumnName("pubYear");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("rating");

                    b.Property<int?>("StockBalance")
                        .HasColumnType("int")
                        .HasColumnName("stockBalance");

                    b.Property<string>("Summary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("BookId")
                        .HasName("PK__book__8BE5A10DE068B40D");

                    b.HasIndex("AuthorId");

                    b.ToTable("book", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("dbc520a8-4435-438e-9d63-cd4de5894655"),
                            AuthorId = new Guid("9363d81e-b1b8-4fb4-9d0f-9c203ab38208"),
                            Genre = "Action",
                            IsDeleted = false,
                            Pages = 250,
                            PubYear = new DateTime(2024, 1, 31, 0, 22, 28, 479, DateTimeKind.Utc).AddTicks(4880),
                            Rating = 4.5m,
                            StockBalance = 10,
                            Summary = "Action packed book",
                            Title = "Book 1"
                        },
                        new
                        {
                            BookId = new Guid("8b50e0f0-b964-48aa-92cb-1dc456e21567"),
                            AuthorId = new Guid("423f7251-7721-46f1-8291-6e5f198e11d2"),
                            Genre = "Comedy",
                            IsDeleted = false,
                            Pages = 300,
                            PubYear = new DateTime(2024, 1, 31, 0, 22, 28, 479, DateTimeKind.Utc).AddTicks(4890),
                            Rating = 3.7m,
                            StockBalance = 20,
                            Summary = "Very funny book",
                            Title = "Book 2"
                        },
                        new
                        {
                            BookId = new Guid("395ef40b-a588-4839-849e-0f13f69e91e7"),
                            AuthorId = new Guid("6b121264-6f37-4961-89da-c4175c3c600c"),
                            Genre = "Drama",
                            IsDeleted = false,
                            Pages = 180,
                            PubYear = new DateTime(2024, 1, 31, 0, 22, 28, 479, DateTimeKind.Utc).AddTicks(4890),
                            Rating = 4.8m,
                            StockBalance = 10,
                            Summary = "So much drama",
                            Title = "Book 3"
                        });
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.Property<Guid>("PurchaseHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("purchaseHistoryId");

                    b.Property<DateTime?>("TimeOfPurchase")
                        .HasColumnType("datetime")
                        .HasColumnName("timeOfPurchase");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("totalPrice");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("PurchaseHistoryId")
                        .HasName("PK__purchase__0261226C79359CBF");

                    b.HasIndex("UserId");

                    b.ToTable("purchaseHistory", (string)null);

                    b.HasData(
                        new
                        {
                            PurchaseHistoryId = new Guid("10c74336-6a85-4f10-b9be-dadab3879e28"),
                            TimeOfPurchase = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(40),
                            TotalPrice = 50,
                            UserId = new Guid("84b53cab-5a58-4263-833d-6c6fe733d937")
                        },
                        new
                        {
                            PurchaseHistoryId = new Guid("d9293fe0-227d-449d-87b6-5ebe32d11496"),
                            TimeOfPurchase = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(50),
                            TotalPrice = 30,
                            UserId = new Guid("84b53cab-5a58-4263-833d-6c6fe733d937")
                        },
                        new
                        {
                            PurchaseHistoryId = new Guid("0f8c5b72-deb9-41c2-9f02-45e46851ac5f"),
                            TimeOfPurchase = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(50),
                            TotalPrice = 25,
                            UserId = new Guid("84b53cab-5a58-4263-833d-6c6fe733d937")
                        });
                });

            modelBuilder.Entity("Domain.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiptId");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookId");

                    b.Property<DateTime?>("DateDetail")
                        .HasColumnType("datetime")
                        .HasColumnName("dateDetail");

                    b.Property<int?>("PricePerUnit")
                        .HasColumnType("int")
                        .HasColumnName("pricePerUnit");

                    b.Property<Guid?>("PurchaseHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("purchaseHistoryId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("ReceiptId")
                        .HasName("PK__purchase__FA43B55BADA17CED");

                    b.HasIndex("PurchaseHistoryId");

                    b.ToTable("Receipt", (string)null);

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("7df7c902-07b4-448b-8e2a-bfe0779df0cb"),
                            BookId = new Guid("dbc520a8-4435-438e-9d63-cd4de5894655"),
                            DateDetail = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(80),
                            PricePerUnit = 100,
                            PurchaseHistoryId = new Guid("10c74336-6a85-4f10-b9be-dadab3879e28"),
                            Quantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("9c8a0064-8549-43b4-8916-6b1eade8dd35"),
                            BookId = new Guid("8b50e0f0-b964-48aa-92cb-1dc456e21567"),
                            DateDetail = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(80),
                            PricePerUnit = 150,
                            PurchaseHistoryId = new Guid("d9293fe0-227d-449d-87b6-5ebe32d11496"),
                            Quantity = 1
                        },
                        new
                        {
                            ReceiptId = new Guid("68f582df-8cbb-43ef-a8ed-bcbe1736378c"),
                            BookId = new Guid("395ef40b-a588-4839-849e-0f13f69e91e7"),
                            DateDetail = new DateTime(2024, 1, 31, 0, 22, 28, 760, DateTimeKind.Utc).AddTicks(90),
                            PricePerUnit = 80,
                            PurchaseHistoryId = new Guid("0f8c5b72-deb9-41c2-9f02-45e46851ac5f"),
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("firstName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("surName");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telephoneNumber");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("userName");

                    b.HasKey("UserId")
                        .HasName("PK__user__CB9A1CFF7FE751DC");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("84b53cab-5a58-4263-833d-6c6fe733d937"),
                            Email = "mail@gmail.com",
                            FirstName = "Test",
                            Password = "$2a$11$mt4sWAw1ZoPO9REd5bW2R.g7EZn0.0BxPfVpdRGgRK9I26Xmc0PX.",
                            SurName = "Test",
                            TelephoneNumber = "+467000000",
                            UserName = "AnvändareTestKöphistorik"
                        },
                        new
                        {
                            UserId = new Guid("8622f8e7-2356-4f83-bd2b-bcb0dab3b9e8"),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            Password = "$2a$11$fhcwKfturqgJ2cSzXX4dXuOd.l3Ygw0F23PY/5UIaBTr0.desTYRe",
                            SurName = "Admin",
                            TelephoneNumber = "+4671111111",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("walletId");

                    b.Property<int?>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("WalletId")
                        .HasName("PK__wallet__3785C8706E62B1A8");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.HasOne("Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__book__authorId__4222D4EF");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__purchaseH__userI__412EB0B6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Receipt", b =>
                {
                    b.HasOne("Domain.Models.PurchaseHistory", "PurchaseHistories")
                        .WithMany("Receipts")
                        .HasForeignKey("PurchaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__purchaseD__purch__4316F928");

                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("Domain.Models.Wallet", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("PurchaseHistories");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

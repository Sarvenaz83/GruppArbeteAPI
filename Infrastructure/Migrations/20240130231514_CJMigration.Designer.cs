// <auto-generated />
using System;
using Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HarryPotterContext))]
    [Migration("20240130231514_CJMigration")]
    partial class CJMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorId");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("authorName");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("AuthorId")
                        .HasName("PK__author__8E2731B93441940C");

                    b.ToTable("author", (string)null);

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("943c6ec8-31ee-45a9-877b-f323c63d7bb1"),
                            AuthorName = "J.K Rowling",
                            IsDeleted = false
                        },
                        new
                        {
                            AuthorId = new Guid("5b16858e-f785-467c-985d-2b676b050a5a"),
                            AuthorName = "Alan Rickman",
                            IsDeleted = false
                        },
                        new
                        {
                            AuthorId = new Guid("3c74767c-b033-4b7e-aec0-292546123bf4"),
                            AuthorName = "Stephen King",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookId");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorId");

                    b.Property<string>("Genre")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("genre");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Pages")
                        .HasColumnType("int")
                        .HasColumnName("pages");

                    b.Property<DateTime?>("PubYear")
                        .HasColumnType("datetime")
                        .HasColumnName("pubYear");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("rating");

                    b.Property<int?>("StockBalance")
                        .HasColumnType("int")
                        .HasColumnName("stockBalance");

                    b.Property<string>("Summary")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("BookId")
                        .HasName("PK__book__8BE5A10DE068B40D");

                    b.HasIndex("AuthorId");

                    b.ToTable("book", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("877d17b1-9b90-496e-a788-d47355349d0d"),
                            AuthorId = new Guid("943c6ec8-31ee-45a9-877b-f323c63d7bb1"),
                            Genre = "Action",
                            IsDeleted = false,
                            Pages = 250,
                            PubYear = new DateTime(2024, 1, 30, 23, 15, 13, 874, DateTimeKind.Utc).AddTicks(1940),
                            Rating = 4.5m,
                            StockBalance = 10,
                            Summary = "Action packed book",
                            Title = "Book 1"
                        },
                        new
                        {
                            BookId = new Guid("b1a048fb-5eda-416e-9516-90b1012f623b"),
                            AuthorId = new Guid("5b16858e-f785-467c-985d-2b676b050a5a"),
                            Genre = "Comedy",
                            IsDeleted = false,
                            Pages = 300,
                            PubYear = new DateTime(2024, 1, 30, 23, 15, 13, 874, DateTimeKind.Utc).AddTicks(1950),
                            Rating = 3.7m,
                            StockBalance = 20,
                            Summary = "Very funny book",
                            Title = "Book 2"
                        },
                        new
                        {
                            BookId = new Guid("0e8cf5ea-fbd8-49d9-8bb9-abd654f53961"),
                            AuthorId = new Guid("3c74767c-b033-4b7e-aec0-292546123bf4"),
                            Genre = "Drama",
                            IsDeleted = false,
                            Pages = 180,
                            PubYear = new DateTime(2024, 1, 30, 23, 15, 13, 874, DateTimeKind.Utc).AddTicks(1950),
                            Rating = 4.8m,
                            StockBalance = 10,
                            Summary = "So much drama",
                            Title = "Book 3"
                        });
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.Property<Guid>("PurchaseHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("purchaseHistoryId");

                    b.Property<DateTime?>("TimeOfPurchase")
                        .HasColumnType("datetime")
                        .HasColumnName("timeOfPurchase");

                    b.Property<int?>("TotalPrice")
                        .HasColumnType("int")
                        .HasColumnName("totalPrice");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("PurchaseHistoryId")
                        .HasName("PK__purchase__0261226C79359CBF");

                    b.HasIndex("UserId");

                    b.ToTable("purchaseHistory", (string)null);

                    b.HasData(
                        new
                        {
                            PurchaseHistoryId = new Guid("06f7523a-32c2-461f-9d6b-4c3fa03564ca"),
                            TimeOfPurchase = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5750),
                            TotalPrice = 50,
                            UserId = new Guid("1e383c91-e7d0-46a6-a1da-3d2e424e4035")
                        },
                        new
                        {
                            PurchaseHistoryId = new Guid("7a2af17c-9401-49b9-b5b2-db1a35f53fc0"),
                            TimeOfPurchase = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5750),
                            TotalPrice = 30,
                            UserId = new Guid("1e383c91-e7d0-46a6-a1da-3d2e424e4035")
                        },
                        new
                        {
                            PurchaseHistoryId = new Guid("12365271-867c-4734-a649-30f3b235a60e"),
                            TimeOfPurchase = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5750),
                            TotalPrice = 25,
                            UserId = new Guid("1e383c91-e7d0-46a6-a1da-3d2e424e4035")
                        });
                });

            modelBuilder.Entity("Domain.Models.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ReceiptId");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bookId");

                    b.Property<DateTime?>("DateDetail")
                        .HasColumnType("datetime")
                        .HasColumnName("dateDetail");

                    b.Property<int?>("PricePerUnit")
                        .HasColumnType("int")
                        .HasColumnName("pricePerUnit");

                    b.Property<Guid?>("PurchaseHistoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("purchaseHistoryId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("ReceiptId")
                        .HasName("PK__purchase__FA43B55BADA17CED");

                    b.HasIndex("PurchaseHistoryId");

                    b.ToTable("Receipt", (string)null);

                    b.HasData(
                        new
                        {
                            ReceiptId = new Guid("1bfd0420-b766-4350-a554-08148d3bc4bb"),
                            BookId = new Guid("877d17b1-9b90-496e-a788-d47355349d0d"),
                            DateDetail = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5790),
                            PricePerUnit = 100,
                            PurchaseHistoryId = new Guid("06f7523a-32c2-461f-9d6b-4c3fa03564ca"),
                            Quantity = 2
                        },
                        new
                        {
                            ReceiptId = new Guid("825f8366-3011-4de2-8de8-ceaa2d6f60c1"),
                            BookId = new Guid("b1a048fb-5eda-416e-9516-90b1012f623b"),
                            DateDetail = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5800),
                            PricePerUnit = 150,
                            PurchaseHistoryId = new Guid("7a2af17c-9401-49b9-b5b2-db1a35f53fc0"),
                            Quantity = 1
                        },
                        new
                        {
                            ReceiptId = new Guid("f04da8ea-996a-4b65-b45e-7c1da972869f"),
                            BookId = new Guid("0e8cf5ea-fbd8-49d9-8bb9-abd654f53961"),
                            DateDetail = new DateTime(2024, 1, 30, 23, 15, 14, 155, DateTimeKind.Utc).AddTicks(5800),
                            PricePerUnit = 80,
                            PurchaseHistoryId = new Guid("12365271-867c-4734-a649-30f3b235a60e"),
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("firstName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("surName");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telephoneNumber");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("userName");

                    b.HasKey("UserId")
                        .HasName("PK__user__CB9A1CFF7FE751DC");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1e383c91-e7d0-46a6-a1da-3d2e424e4035"),
                            Email = "mail@gmail.com",
                            FirstName = "Test",
                            Password = "$2a$11$yU2QyA8m0GVeXZYQdK6StOU6zaTOobzJRe06lHXZ5GylnfQcq7wIu",
                            SurName = "Test",
                            TelephoneNumber = "+467000000",
                            UserName = "AnvändareTestKöphistorik"
                        },
                        new
                        {
                            UserId = new Guid("6190c409-ae89-4271-bb5e-0d5b9c704da9"),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            Password = "$2a$11$hRqDZrAirse7Gqamg1MXYu.gTCgVLWPX1CeR7tg6U73EGDzFz9Wna",
                            SurName = "Admin",
                            TelephoneNumber = "+4671111111",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("walletId");

                    b.Property<int?>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("WalletId")
                        .HasName("PK__wallet__3785C8706E62B1A8");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Book", b =>
                {
                    b.HasOne("Domain.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__book__authorId__4222D4EF");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__purchaseH__userI__412EB0B6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Receipt", b =>
                {
                    b.HasOne("Domain.Models.PurchaseHistory", "PurchaseHistories")
                        .WithMany("Receipts")
                        .HasForeignKey("PurchaseHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__purchaseD__purch__4316F928");

                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("Domain.Models.Wallet", b =>
                {
                    b.HasOne("Domain.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Models.PurchaseHistory", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("PurchaseHistories");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
